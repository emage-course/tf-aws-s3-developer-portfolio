### Installing plugins in Jenkins

Now we need to install some plugins in our Jenkins service so that the pipeline script we are about to write in the Jenkins job will be set up properly.

**Step 1:** Go to Jenkins dashboard, and then to Plugin Manager. 

**Step 2:** Here, click on the Available tab and search for the following plugins

Best Jenkins Plugins:

- Docker
- Docker Pipeline
- Amazon ECR plugin
- Blue Ocean
- aws
- ecr 
- acr 
- s3 
- Terraform 
- Ansible 
- Hashicorp Vault 
- Kubernetes
- GitHub 
- GitLab 
- GitHub AuthenticationVersion
- LDAP 
- Active Directory 
- ⁠Artifactory
- ⁠Blue Ocean
- ⁠Maven Integration
-⁠ ⁠Git Plugin
- ⁠SonarQube Scanner
- ⁠Slack-Jenkins Plugin
- ⁠Amazon EC2
- ⁠JaCoCo
- ⁠Pipeline
- ⁠Copy Artifact
- ⁠Kubernetes Plugin
- ⁠Docker Pipeline Plugin
- ⁠⁠Kubernetes Continuous Deploy Plugin
- ⁠⁠Kubernetes Secrets
-⁠ ⁠⁠Hashicorp vault

### Configure Jenkins Job

Configure the Jenkins job or pipeline with the necessary settings, such as repository URL, credentials, and triggers (e.g., GitHub webhook, periodic builds, etc.).

### Install Required Plugins

Step-1
Now, We should install the Terraform plugin on Jenkins which makes Jenkins interact with terraform. Follow the below steps to install the Terraform plugin:

Step-2
Depending on your project's needs, you may need to install Jenkins plugins for version control systems (e.g. Git), and any other required integrations for cost control, drift detection and policies.

Dashboard >> Manage Jenkins >> Manage Plugin >> Available plugins 

Step-3
Now we need to configure the global tool for terraform. In the install directory, we need to pass the path of terraform where we have installed terraform and save it. Follow the below step to configure:

Dashboard >> Manage jenkins >> Global Tool Configuration

Step-4
Now create a job to run the pipeline. We just need to select the pipeline option and ok to create a pipeline. Follow the below steps:

Dashboard >> new Item >> give name and create

**Declarative Directive Generator** and then select terraform to generate pipeline. Copy that script into the pipeline.

### Create a Jenkins Job or Pipeline

You can create a Jenkins job or pipeline based on your project's requirements. The choice between a freestyle job or a pipeline depends on your needs and complexity. A pipeline is more versatile and recommended for complex workflows.

### Run the Job
Trigger the Jenkins job manually or configure it to be triggered automatically based on your requirements.

Running Terraform in Jenkins involves setting up a Jenkins job or pipeline to automate your infrastructure provisioning and 

Pipeline: Create a Jenkinsfile in your project repository to define the pipeline. Below is an example Jenkinsfile for running Terraform commands using a declarative pipeline:

### Creating ECR Repository
### Creating IAM Role

aws ec2 describe-instances --query "Reservations[*].Instances[*].[VpcId, InstanceId, ImageId, InstanceType]"
aws rds describe-db-instances --query "DBInstances[*].[DBInstanceIdentifier, DBName, DBInstanceStatus, AvailabilityZone, DBInstanceClass]"
aws iam list-roles --query "Roles[?RoleName == 'example-role'].[RoleName, Arn]"
aws sts get-caller-identity

### Create an IAM Admin user using AWS CLI

1. Create an IAM user by running the following command
aws iam create-user --user-name <IAM_username>

2. (Optional) If you have not created an Admin group already, you can create one in this step, else skip to step 5. Run the following command to create a user group
aws iam create-group --group-name <Group_name>

3. Attach the AdministratorAccess policy to the group created
aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AdministratorAccess --group-name <Group_name>

4. To check if the policy has been attached to the group, you can check by running the following command
aws iam list-attached-group-policies --group-name <Group_name>

5. Add the Admin user to the Admin group by running the following command
aws iam add-user-to-group --user-name <User_name> --group-name <Group_name>

6. To check if the user got added to the group, run the following command
aws iam list-groups-for-user --user-name <User_name>

aws iam create-role --role-name admin-role --assume-role-policy-document file://~/scripts/admin-role-trust-policy.json
aws iam attach-role-policy --role-name admin-role --policy-arn "arn:aws:iam::aws:policy/AdministratorAccess"
aws iam list-attached-role-policies --role-name admin-role


